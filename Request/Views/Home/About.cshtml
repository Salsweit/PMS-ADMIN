<link href="~/Content/request.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">






<!-- SEARCH REQUEST ITEM -->

<div style="display: flex; flex-direction: row; justify-content: space-between; align-items: center;">
    <div>
        <input type="text" id="searchInput1" class="form-control" placeholder="Search..." onkeyup="searchRequest()">
    </div>

    <!-- SCRIPT FOR REQUEST ITEM-->

    <script>
        function searchRequest() {
            const searchInput = document.getElementById('searchInput').value.toLowerCase();
            const tableBody = document.getElementById('requestTableBody');

            // Get all rows from the table
            const rows = tableBody.getElementsByTagName('tr');

            // Loop through all table rows
            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];

                // Get the cells in the row
                const cells = row.getElementsByTagName('td');

                // Initialize a flag to check if any cell matches the search input
                let matchFound = false;

                // Loop through each cell in the row
                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];

                    // If the cell text includes the search input, mark as found
                    if (cell.textContent.toLowerCase().includes(searchInput)) {
                        matchFound = true;
                        break; // No need to check further cells in this row
                    }
                }

                // Toggle the display of the row based on whether a match was found
                if (matchFound) {
                    row.style.display = ''; // Show the row
                } else {
                    row.style.display = 'none'; // Hide the row
                }
            }
        }
    </script>

    <!-- END FOR SEARCH AND SCRIPT FOR REQUEST ITEM -->
    <!-- ADD ITEM REQUEST BUTTON -->
    <div class="button-container" style="display: flex;  ">
        @*justify-content: space-between;*@
        <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm" id="request" style="padding: 8px 15px">
            <i class="fas fa-download fa-sm text-white-50"></i> Add Item Request
        </a>

    </div>
</div>
<!-- END OF ITEM REQUEST BUTTON -->
<!-- TABLE FOR REQUEST ITEM -->

<div class="table-responsive" style="position:relative; padding-top:6px; max-height: 500px; overflow: auto; background-color: #F3F3F4;">
    <table class="table table-striped table-bordered" style="border-radius: 8px; margin-top: 25px;">
        <thead class="table-light sticky-header bg-gradient-primary" style="text-align: center; background-color: #007bff; color: rgb(0,0,0);">
            <tr>
                <th scope="col">Select</th>
                <th scope="col">Request ID</th>
                <th scope="col">Category</th>
                <th scope="col">Item Name</th>
                <th scope="col">Budget</th>
                <th scope="col">Unit Price</th>
                <th scope="col">Unit</th>
                <th scope="col">Date Request</th>
                <th scope="col">Date Needed</th>
                <th scope="col">Approving Person</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody id="requestTableBody" style="background-color: #F3F3F4; text-align: center;">
            <!-- Rows will be appended here -->
        </tbody>
    </table>
</div>



<!-- EDIT MODAL -->

<div id="editModal" class="modal" style="display: none;">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h2>Edit Request</h2>
        <form id="editForm">
            <input type="hidden" id="editId">
            <label for="editCategory">Category:</label>
            <input type="text" id="editCategory" required>
            <label for="editItemName">Item Name:</label>
            <input type="text" id="editItemName" required>
            <label for="editBudget">Budget:</label>
            <input type="number" id="editBudget" required>
            <label for="editUnitPrice">Unit Price:</label>
            <input type="number" id="editUnitPrice" required>
            <label for="editUnit">Unit:</label>
            <input type="text" id="editUnit" required>
            <label for="editDateRequest">Date Request:</label>
            <input type="date" id="editDateRequest" required>
            <label for="editDateNeeded">Date Needed:</label>
            <input type="date" id="editDateNeeded" required>
            <label for="editApprovingPerson">Approving Person:</label>
            <input type="text" id="editApprovingPerson" required>
            <button type="submit">Save Changes</button>
        </form>
    </div>
</div>

<!-- END OF EDIT MODAL -->
<!-- CSS FOR EDIT MODAL -->
<style>
    /* Modal Styles */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto; /* 15% from the top and centered */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Could be more or less, depending on screen size */
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        padding-left: 430px;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    /* Form Styles */
    form {
        display: flex;
        flex-direction: column;
    }

    label {
        margin-top: 10px;
    }

    input[type="text"],
    input[type="number"],
    input[type="date"] {
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button[type="submit"] {
        margin-top: 20px;
        padding: 10px;
        border: none;
        border-radius: 4px;
        background-color: #007bff;
        color: white;
        cursor: pointer;
    }

        button[type="submit"]:hover {
            background-color: #0056b3;
        }

    /* Table Styles */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #4e73df;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    tr:hover {
        background-color: #f1f1f1;
    }

    .btn {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .btn-info {
        background-color: #17a2b8;
        color: white;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-info:hover {
        background-color: #138496;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }
</style>

<!-- END OF EDIT STYLE MODAL -->
<!-- SCRIPT FOR EDIT MODAL -->
<script>


    function openEditModal(row) {
        const cells = row.getElementsByTagName("td");

        document.getElementById("editId").value = cells[1].innerText; // Assuming ID is in the second cell
        document.getElementById("editCategory").value = cells[2].innerText;
        document.getElementById("editItemName").value = cells[3].innerText;
        document.getElementById("editBudget").value = cells[4].innerText;
        document.getElementById("editUnitPrice").value = cells[5].innerText;
        document.getElementById("editUnit").value = cells[6].innerText;
        document.getElementById("editDateRequest").value = cells[7].innerText;
        document.getElementById("editDateNeeded").value = cells[8].innerText;
        document.getElementById("editApprovingPerson").value = cells[9].innerText;

        document.getElementById("editModal").style.display = "block";
    }

    function closeModal() {
        document.getElementById("editModal").style.display = "none";
    }

    document.getElementById("editForm").addEventListener("submit", function (e) {
        e.preventDefault();

        const id = document.getElementById("editId").value;
        const category = document.getElementById("editCategory").value;
        const itemName = document.getElementById("editItemName").value;
        const budget = document.getElementById("editBudget").value;
        const unitPrice = document.getElementById("editUnitPrice").value;
        const unit = document.getElementById("editUnit").value;
        const dateRequest = document.getElementById("editDateRequest").value;
        const dateNeeded = document.getElementById("editDateNeeded").value;
        const approvingPerson = document.getElementById("editApprovingPerson").value;

        // Update the row in the table
        const rows = document.querySelectorAll("#requestTableBody tr");
        rows.forEach(row => {
            if (row.cells[1].innerText === id) { // Check if the row matches the ID
                row.cells[2].innerText = category;
                row.cells[3].innerText = itemName;
                row.cells[4].innerText = budget;
                row.cells[5].innerText = unitPrice;
                row.cells[6].innerText = unit;
                row.cells[7].innerText = dateRequest;
                row.cells[8].innerText = dateNeeded;
                row.cells[9].innerText = approvingPerson;
            }
        });

        closeModal();
    });



    function editRequest(id, category, itemName, budget, unitPrice, unit, dateRequest, dateNeeded) {
        // Populate modal fields with the selected row's data
        document.getElementById("editRequestId").value = id;
        document.getElementById("editCategory").value = category;
        document.getElementById("editItemName").value = itemName;
        document.getElementById("editBudget").value = budget;
        document.getElementById("editUnitPrice").value = unitPrice;
        document.getElementById("editUnit").value = unit;
        document.getElementById("editDateRequest").value = dateRequest;
        document.getElementById("editDateNeeded").value = dateNeeded;

        // Show the modal
        document.getElementById("editModal").style.display = "block";
    }

    // Delete request function
    function deleteRequest(button) {
        const row = button.closest("tr"); // Find the closest table row
        if (row) {
            const requestId = row.cells[1].textContent; // Get the request ID from the second cell
            if (confirm(`Are you sure you want to delete request ${requestId}?`)) {
                removeRequestFromStorage(requestId); // Remove from localStorage
                row.remove(); // Remove the row from the table
                alert("Request deleted!"); // Show confirmation
            }
        }
    }

    // Close modal functionality
    document.getElementById("closeEditModal").onclick = function () {
        document.getElementById("editModal").style.display = "none";
    }

    // Handle the form submission
    document.getElementById("editRequestForm").onsubmit = function (event) {
        event.preventDefault();
        // Handle saving the edited request here
        alert("Changes saved!");
        document.getElementById("editModal").style.display = "none"; // Close the modal
    }
</script>

<!-- END OF SCRIPT EDIT  -->





<style>

    .container1 {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
        /*overflow: auto;*/ /* Enable scrolling */
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto; /* Center the modal */
        padding: 20px;
        border: 1px solid #888;
        width: 500px; /* Could be more or less, depending on screen size */
        max-height: 80%; /* Limit height to allow scrolling */
        overflow-y: auto; /* Enable vertical scrolling */
        border-radius: 5px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover {
            color: black;
        }
</style>



<!-- BUTTON FOR DONE REQUEST -->

<div class="button-container" style="display: flex; padding-top : 20px; justify-content: flex-end;">
    <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm" id="request">
        <i class="fas fa-download fa-sm text-white-50"></i> Done Request
    </a>
</div>

<!-- END OF BUTTON REQUEST -->
<!-- PROJECT NAME MODAL/FIRST MODAL -->

<div id="firstModal" class="modal1">
    <div class="modal-content1">
        <span class="close" id="closeFirstModal">&times;</span>
        <h2>Add Request</h2>
        <form id="reportForm">
            <label for="projectName">Project Name</label>
            <input type="text" id="projectName" placeholder="" required style="margin-bottom: 10px; width: 100%; padding: 10px;">
            <label for="purpose">Purpose</label>
            <textarea id="purpose" placeholder="" required style="margin-bottom: 10px; width: 100%; padding: 8px; height: 100px;"></textarea>
            <button class="btn btn-primary" type="submit" style="padding: 5px 5px; width: 26%;">Submit</button>
        </form>
    </div>
</div>
<!-- END OF FIRST MODAL -->
<!-- ITEM REQUEST MODAL/SECOND MODAL -->
<div id="secondModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeSecondModal" style="position: absolute; top: 22px; right: 17px; cursor: pointer;">&times;</span>
        <h2>Project Name: <span id="projectNameLabel"></span></h2>
        <form id="requestForm">
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="inputCategory">Category</label>
                    <select id="inputCategory" class="form-control" required onchange="updateItemNames()">
                        <option selected>Choose...</option>
                        <option value="office_supplies">Office Supplies</option>
                        <option value="it_equipment">IT Equipment</option>
                        <option value="cleaning_supplies">Cleaning Supplies</option>
                        <option value="furniture">Furniture</option>
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label for="inputItemname">Item Name</label>
                    <select id="inputItemname" class="form-control" required>
                        <option selected>Choose...</option>
                        <!-- Options will be populated based on selected category -->
                    </select>
                </div>
            </div>

            <!-- Script for Category and Item -->
            <script>
                function updateItemNames() {
                    const category = document.getElementById("inputCategory").value;
                    const itemSelect = document.getElementById("inputItemname");

                    // Clear existing options
                    itemSelect.innerHTML = '<option selected>Choose...</option>';

                    // Define items based on categories
                    const items = {
                        office_supplies: [
                            "Office Desks",
                            "Office Chairs"
                        ],
                        it_equipment: [
                            "Laptops",
                            "Printers"
                        ],
                        cleaning_supplies: [
                            "Detergent",
                            "Mop",
                            "Broom"
                        ],
                        furniture: [
                            "Conference Table",
                            "Filing Cabinet"
                        ]
                    };

                    // Populate item names based on the selected category
                    if (items[category]) {
                        items[category].forEach(item => {
                            const option = document.createElement("option");
                            option.value = item;
                            option.textContent = item;
                            itemSelect.appendChild(option);
                        });
                    }
                }
            </script>

            <!-- END SCRIPT FOR CATEGORY AND ITEM -->
            <!-- CONTINUE FOR SECOND MODAL -->

            <div class="form-row">
                <div class="form-group col-md-6">
                    <label for="inputBudget">Budget</label>
                    <input type="number" class="form-control" id="inputBudget" placeholder="Budget Amount" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="inputUnitPrice">Unit Price</label>
                    <input type="number" id="inputUnitPrice" class="form-control" placeholder="Enter unit price" step="0.01" min="0" required>
                </div>
                <div class="form-group col-md-6">
                    <label for="inputUnit">Unit</label>
                    <select id="inputUnit" class="form-control" required>
                        <option selected>Choose...</option>
                        <option>Meters</option>
                        <option>Centimeters</option>
                        <option>Inches</option>
                        <option>Width</option>
                    </select>
                </div>
                <div class="form-group col-md-6">
                    <label for="inputDateNeeded">Date Needed</label>
                    <input type="datetime-local" id="inputDateNeeded" class="form-control" required>
                </div>
                <div class="form-group">
                    <label for="inputApprovingPerson">Approving Person</label>
                    <select id="inputApprovingPerson" class="form-control">
                        <option value="John Manigque">John Manigque</option>
                        <option value="Floyd Paccarangan">Floyd Paccarangan</option>
                        <option value="Edward Salcedo">Edward Salcedo</option>
                    </select>
                </div>
            </div>

            <!-- END FOR SECOND MODAL -->


            <!-- BUTTON FOR SUBMIT FOR SECOND MODAL -->
            <button type="submit" class="btn btn-primary" style="padding: 5px 5px; width: 26%;">Submit</button>
        </form>
    </div>
</div>
<!-- END FOR BUTTON -->




<script>


    // Get modals
    const firstModal = document.getElementById("firstModal");
    const secondModal = document.getElementById("secondModal");

    // Get buttons and close elements
    const requestBtn = document.getElementById("request");
    const closeFirstBtn = document.getElementById("closeFirstModal");
    const closeSecondBtn = document.getElementById("closeSecondModal");

    // Load requests from localStorage on page load
    document.addEventListener("DOMContentLoaded", loadRequests);

    // Open first modal
    requestBtn.onclick = function (event) {
        event.preventDefault();
        firstModal.style.display = "block";
    }

    // Close modals
    closeFirstBtn.onclick = function () {
        firstModal.style.display = "none";
    }
    closeSecondBtn.onclick = function () {
        secondModal.style.display = "none";
    }

    // Handle the first form submission
    document.getElementById("reportForm").onsubmit = function (event) {
        event.preventDefault();
        const projectName = document.getElementById("projectName").value; // Get project name
        document.getElementById("projectNameLabel").textContent = projectName; // Set project name in second modal

        // Close the first modal and open the second modal
        firstModal.style.display = "none";
        secondModal.style.display = "block";
    }

    // Handle the second form submission
    document.getElementById("requestForm").onsubmit = function (event) {
        event.preventDefault();

        // Get values from form fields
        const category = document.getElementById("inputCategory").value;
        const itemName = document.getElementById("inputItemname").value;
        const budget = document.getElementById("inputBudget").value;
        const unitPrice = document.getElementById("inputUnitPrice").value;
        const unit = document.getElementById("inputUnit").value;
        const dateRequest = new Date().toLocaleString(); // Current date for request
        const dateNeeded = document.getElementById("inputDateNeeded").value;
        const approvingPerson = document.getElementById("inputApprovingPerson").value; // Get the selected approving person

        // Create a new request object
        const newRequest = {
            id: generateRequestID(),
            category,
            itemName,
            budget,
            unitPrice,
            unit,
            dateRequest,
            dateNeeded,
            approvingPerson
        };

        // Save the new request to localStorage
        saveRequest(newRequest);

        // Append the new row to the table
        addRequestRow(newRequest);

        // Close the second modal
        secondModal.style.display = "none";
        document.getElementById("requestForm").reset(); // Reset the form
    };

    // Function to generate a unique Request ID
    function generateRequestID() {
        return "REQ" + Math.floor(Math.random() * 1000).toString().padStart(3, '0');
    }

    // Function to save request to localStorage
    function saveRequest(request) {
        const requests = JSON.parse(localStorage.getItem("requests")) || [];
        requests.push(request);
        localStorage.setItem("requests", JSON.stringify(requests));
    }

    // Load requests from localStorage
    function loadRequests() {
        const requests = JSON.parse(localStorage.getItem("requests")) || [];
        requests.forEach(addRequestRow);
    }

    // Function to add a row to the table
    function addRequestRow(request) {
        const newRow = document.createElement("tr");
        newRow.innerHTML = `
        <td><input type="checkbox" class="row-check"></td>
        <td>${request.id}</td>
        <td>${request.category}</td>
        <td>${request.itemName}</td>
        <td>${request.budget}</td>
        <td>${request.unitPrice}</td>
        <td>${request.unit}</td>
        <td>${request.dateRequest}</td>
        <td>${request.dateNeeded}</td>
        <td>${request.approvingPerson}</td>
        <td style="display: flex; gap: 10px; justify-content: center;">
            <button class="btn btn-info btn-sm" onclick="openEditModal(this.closest('tr'))">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="deleteRequest(this)">Delete</button>
        </td>
    `;
        document.getElementById("requestTableBody").appendChild(newRow);
    }
    // Delete request function
    function deleteRequest(button) {
        const row = button.closest("tr"); // Find the closest table row
        if (row) {
            const requestId = row.cells[1].textContent; // Get the request ID from the second cell
            if (confirm(`Are you sure you want to delete request ${requestId}?`)) {
                removeRequestFromStorage(requestId); // Remove from localStorage
                row.remove(); // Remove the row from the table
                alert("Request deleted!"); // Show confirmation
            }
        }
    }
    // Function to remove a request from localStorage
    function removeRequestFromStorage(requestId) {
        const requests = JSON.parse(localStorage.getItem("requests")) || [];
        const updatedRequests = requests.filter(req => req.id !== requestId); // Filter out the deleted request
        localStorage.setItem("requests", JSON.stringify(updatedRequests)); // Save the updated list back to localStorage
    }
</script>




<style>
    /* Modal styles omitted for brevity */

    .modal1, .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 500;
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
    }

    .modal-content1, .modal-content {
        background-color: #fefefe;
        margin: 5% auto; /* Center the modal */
        padding: 20px;
        border: 1px solid #888;
        width: 500px; /* Could be more or less, depending on screen size */
        max-height: 80%; /* Limit height to allow scrolling */
        overflow-y: auto; /* Enable vertical scrolling */
        border-radius: 5px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover {
            color: black;
        }
</style>